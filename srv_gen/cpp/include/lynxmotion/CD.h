/* Auto-generated by genmsg_cpp for file /home/gaudi/ros_workspace/lynxmotion/srv/CD.srv */
#ifndef LYNXMOTION_SERVICE_CD_H
#define LYNXMOTION_SERVICE_CD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace lynxmotion
{
template <class ContainerAllocator>
struct CDRequest_ {
  typedef CDRequest_<ContainerAllocator> Type;

  CDRequest_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  CDRequest_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _z_type;
  float z;


private:
  static const char* __s_getDataType_() { return "lynxmotion/CDRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cc153912f1453b708d221682bc23d9ac"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "bd98cbe154fb7c1b765088be4cc6964e"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 x\n\
float32 y\n\
float32 z\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, z);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, z);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(z);
    return size;
  }

  typedef boost::shared_ptr< ::lynxmotion::CDRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lynxmotion::CDRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CDRequest
typedef  ::lynxmotion::CDRequest_<std::allocator<void> > CDRequest;

typedef boost::shared_ptr< ::lynxmotion::CDRequest> CDRequestPtr;
typedef boost::shared_ptr< ::lynxmotion::CDRequest const> CDRequestConstPtr;


template <class ContainerAllocator>
struct CDResponse_ {
  typedef CDResponse_<ContainerAllocator> Type;

  CDResponse_()
  : q1(0.0)
  , q2(0.0)
  , q3(0.0)
  , q4(0.0)
  {
  }

  CDResponse_(const ContainerAllocator& _alloc)
  : q1(0.0)
  , q2(0.0)
  , q3(0.0)
  , q4(0.0)
  {
  }

  typedef float _q1_type;
  float q1;

  typedef float _q2_type;
  float q2;

  typedef float _q3_type;
  float q3;

  typedef float _q4_type;
  float q4;


private:
  static const char* __s_getDataType_() { return "lynxmotion/CDResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "69cec82442f682ecfe3c0ec1306ced82"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "bd98cbe154fb7c1b765088be4cc6964e"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 q1\n\
float32 q2\n\
float32 q3\n\
float32 q4\n\
\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, q1);
    ros::serialization::serialize(stream, q2);
    ros::serialization::serialize(stream, q3);
    ros::serialization::serialize(stream, q4);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, q1);
    ros::serialization::deserialize(stream, q2);
    ros::serialization::deserialize(stream, q3);
    ros::serialization::deserialize(stream, q4);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(q1);
    size += ros::serialization::serializationLength(q2);
    size += ros::serialization::serializationLength(q3);
    size += ros::serialization::serializationLength(q4);
    return size;
  }

  typedef boost::shared_ptr< ::lynxmotion::CDResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lynxmotion::CDResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CDResponse
typedef  ::lynxmotion::CDResponse_<std::allocator<void> > CDResponse;

typedef boost::shared_ptr< ::lynxmotion::CDResponse> CDResponsePtr;
typedef boost::shared_ptr< ::lynxmotion::CDResponse const> CDResponseConstPtr;

struct CD
{

typedef CDRequest Request;
typedef CDResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CD
} // namespace lynxmotion

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::lynxmotion::CDRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::lynxmotion::CDRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::lynxmotion::CDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc153912f1453b708d221682bc23d9ac";
  }

  static const char* value(const  ::lynxmotion::CDRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcc153912f1453b70ULL;
  static const uint64_t static_value2 = 0x8d221682bc23d9acULL;
};

template<class ContainerAllocator>
struct DataType< ::lynxmotion::CDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lynxmotion/CDRequest";
  }

  static const char* value(const  ::lynxmotion::CDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::lynxmotion::CDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x\n\
float32 y\n\
float32 z\n\
\n\
\n\
";
  }

  static const char* value(const  ::lynxmotion::CDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::lynxmotion::CDRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::lynxmotion::CDResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::lynxmotion::CDResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::lynxmotion::CDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "69cec82442f682ecfe3c0ec1306ced82";
  }

  static const char* value(const  ::lynxmotion::CDResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x69cec82442f682ecULL;
  static const uint64_t static_value2 = 0xfe3c0ec1306ced82ULL;
};

template<class ContainerAllocator>
struct DataType< ::lynxmotion::CDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lynxmotion/CDResponse";
  }

  static const char* value(const  ::lynxmotion::CDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::lynxmotion::CDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 q1\n\
float32 q2\n\
float32 q3\n\
float32 q4\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::lynxmotion::CDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::lynxmotion::CDResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::lynxmotion::CDRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CDRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::lynxmotion::CDResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.q1);
    stream.next(m.q2);
    stream.next(m.q3);
    stream.next(m.q4);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CDResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<lynxmotion::CD> {
  static const char* value() 
  {
    return "bd98cbe154fb7c1b765088be4cc6964e";
  }

  static const char* value(const lynxmotion::CD&) { return value(); } 
};

template<>
struct DataType<lynxmotion::CD> {
  static const char* value() 
  {
    return "lynxmotion/CD";
  }

  static const char* value(const lynxmotion::CD&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<lynxmotion::CDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bd98cbe154fb7c1b765088be4cc6964e";
  }

  static const char* value(const lynxmotion::CDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<lynxmotion::CDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lynxmotion/CD";
  }

  static const char* value(const lynxmotion::CDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<lynxmotion::CDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bd98cbe154fb7c1b765088be4cc6964e";
  }

  static const char* value(const lynxmotion::CDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<lynxmotion::CDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lynxmotion/CD";
  }

  static const char* value(const lynxmotion::CDResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LYNXMOTION_SERVICE_CD_H

