"""autogenerated by genmsg_py from motores.msg. Do not edit."""
import roslib.message
import struct


class motores(roslib.message.Message):
  _md5sum = "b62a1c74640995c39e75f3dbdb456df4"
  _type = "lynxmotion/motores"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 q1
float32 q2
float32 q3
float32 q4
float32 q5

"""
  __slots__ = ['q1','q2','q3','q4','q5']
  _slot_types = ['float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       q1,q2,q3,q4,q5
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(motores, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.q1 is None:
        self.q1 = 0.
      if self.q2 is None:
        self.q2 = 0.
      if self.q3 is None:
        self.q3 = 0.
      if self.q4 is None:
        self.q4 = 0.
      if self.q5 is None:
        self.q5 = 0.
    else:
      self.q1 = 0.
      self.q2 = 0.
      self.q3 = 0.
      self.q4 = 0.
      self.q5 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_5f.pack(_x.q1, _x.q2, _x.q3, _x.q4, _x.q5))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.q1, _x.q2, _x.q3, _x.q4, _x.q5,) = _struct_5f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_5f.pack(_x.q1, _x.q2, _x.q3, _x.q4, _x.q5))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.q1, _x.q2, _x.q3, _x.q4, _x.q5,) = _struct_5f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_5f = struct.Struct("<5f")
