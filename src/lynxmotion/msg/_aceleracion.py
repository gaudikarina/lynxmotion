"""autogenerated by genmsg_py from aceleracion.msg. Do not edit."""
import roslib.message
import struct


class aceleracion(roslib.message.Message):
  _md5sum = "50bfd313ab91fdbcdfc22f6f4506e689"
  _type = "lynxmotion/aceleracion"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 aX
float64 aY
float64 aZ
float64 aX0
float64 aY0
float64 aZ0


"""
  __slots__ = ['aX','aY','aZ','aX0','aY0','aZ0']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       aX,aY,aZ,aX0,aY0,aZ0
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(aceleracion, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.aX is None:
        self.aX = 0.
      if self.aY is None:
        self.aY = 0.
      if self.aZ is None:
        self.aZ = 0.
      if self.aX0 is None:
        self.aX0 = 0.
      if self.aY0 is None:
        self.aY0 = 0.
      if self.aZ0 is None:
        self.aZ0 = 0.
    else:
      self.aX = 0.
      self.aY = 0.
      self.aZ = 0.
      self.aX0 = 0.
      self.aY0 = 0.
      self.aZ0 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.aX, _x.aY, _x.aZ, _x.aX0, _x.aY0, _x.aZ0))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.aX, _x.aY, _x.aZ, _x.aX0, _x.aY0, _x.aZ0,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.aX, _x.aY, _x.aZ, _x.aX0, _x.aY0, _x.aZ0))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.aX, _x.aY, _x.aZ, _x.aX0, _x.aY0, _x.aZ0,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_6d = struct.Struct("<6d")
